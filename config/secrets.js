const crypto = require('crypto')
const { SECRET_TAG_PACKAGE, SECRET_AUTH_PACKAGE, SECRET_DEFAULT_PACKAGE } = require('../.env')

/**
 * @function
 * @module secrets
 * @description Provide some functions for aplying cryptography.
 * @param {Object} app - A app Object provided by consign.
 * @returns {Object} Containing some encrypts and decrypts functions.
 */
module.exports = app => {
  /**
   * @function
   * @description Encrypt an user tag.
   * @param {String} tag - A user information.
   * @returns {String} A user tag.
   */
  const encryptTag = tag => {
    const { algorithm, secret, binEncode, encode } = SECRET_TAG_PACKAGE

    const cipher = crypto.createCipher(algorithm, secret)
    let crypted = cipher.update(tag, binEncode, encode)
    crypted += cipher.final(encode)

    return crypted
  }

  /**
   * @function
   * @description Decrypt an user tag.
   * @param {String} tagEncrypted - A user tag.
   * @returns {String} A user information.
   */
  const decryptTag = tagEncrypted => {
    const { algorithm, secret, binEncode, encode } = SECRET_TAG_PACKAGE

    const decipher = crypto.createDecipher(algorithm, secret)
    let res = decipher.update(tagEncrypted, encode, binEncode)
    res += decipher.final(binEncode)

    return res
  }

  /**
   * @function
   * @description Encrypt an user password.
   * @param {String} password - User password.
   * @returns {String} A ciphered user password.
   */
  const encryptAuth = password => {
    const { algorithm, secret, binEncode, encode } = SECRET_AUTH_PACKAGE

    const cipher = crypto.createCipher(algorithm, secret)
    let crypted = cipher.update(password, binEncode, encode)
    crypted += cipher.final(encode)

    return crypted
  }

  /**
   * @function
   * @description Decrypt an user password.
   * @param {String} password - A ciphered password.
   * @returns {String} A real user password.
   */
  const decryptAuth = password => {
    const { algorithm, secret, binEncode, encode } = SECRET_AUTH_PACKAGE

    const decipher = crypto.createDecipher(algorithm, secret)
    let res = decipher.update(password, encode, binEncode)
    res += decipher.final(binEncode)

    return res
  }

  /**
   * @function
   * @description Encrypt a generic token.
   * @param {String} text - Text content to be a token.
   * @returns {String} Efective Token.
   */
  const encryptToken = text => {
    const { algorithm, secret, binEncode, encode } = SECRET_DEFAULT_PACKAGE

    const cipher = crypto.createCipher(algorithm, secret)

    let crypted = cipher.update(text, binEncode, encode)

    crypted += cipher.final(encode)

    return crypted
  }

  /**
   * @function
   * @description Decrypt a token generated by "encryptToken" function.
   * @param {String} token - Token.
   * @returns {String} A real text content.
   */
  const decryptToken = token => {
    const { algorithm, secret, binEncode, encode } = SECRET_DEFAULT_PACKAGE

    const decipher = crypto.createDecipher(algorithm, secret)
    let res = decipher.update(token, encode, binEncode)
    res += decipher.final(binEncode)

    return res
  }

  return { encryptTag, decryptTag, encryptAuth, decryptAuth, encryptToken, decryptToken }
}
